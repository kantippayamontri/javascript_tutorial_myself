import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { parse, serialize } from 'cookie';
import { Api } from 'rest-api-handler';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class CookieApi extends Api {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "fetchRequest", async request => {
      const response = await super.fetchRequest.call(this, request);
      const setCookieHeader = response.headers.get('set-cookie'); // if set cookies headers are not set, just continue

      if (!setCookieHeader) {
        return response;
      }

      let cookies = {}; // parse multiple set-cookie headers

      setCookieHeader.split(';').map(item => {
        return !item.includes('expires') ? item.replace(',', '\n') : item;
      }).join(';').split('\n').map(item => {
        return parse(item.split(';')[0]);
      }).forEach(item => {
        cookies = _objectSpread({}, cookies, {}, item);
      });
      this.addCookies(cookies);
      return response;
    });
  }

  /**
   * Serialize Object of cookies to single string.
   *
   * @param cookies - Object with cookies
   * @returns serialized cookies string
   */
  static serializeCookies(cookies) {
    return Object.keys(cookies).map(name => {
      return serialize(name, cookies[name]);
    }).join(';');
  }
  /**
   * Process response headers, parse cookies and save them to object.
   *
   * @param request - Fetch request
   * @returns Response
   */


  /**
   * Get cookies as human readable object.
   */
  getCookies() {
    const cookies = this.getDefaultHeaders().cookie;

    if (typeof cookies !== 'string') {
      return null;
    }

    return parse(cookies);
  }
  /**
   * Add object of cookies.
   *
   * @param cookies - Object of cookies
   */


  addCookies(cookies) {
    this.setDefaultHeader('cookie', CookieApi.serializeCookies(_objectSpread({}, this.getCookies(), {}, cookies)));
  }

}

export default CookieApi;
