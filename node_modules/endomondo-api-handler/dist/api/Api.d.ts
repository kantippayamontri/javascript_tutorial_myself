import { DateTime } from 'luxon';
import { ApiResponseType } from 'rest-api-handler';
import CookieApi from 'cookie-api-handler';
import { Workout } from '../models';
import * as TYPES from '../types';
export default class Api extends CookieApi<ApiResponseType<any>> {
    protected userId: number | null;
    protected userToken: string | null;
    protected csfrtoken: string;
    protected dateFormat: string;
    constructor(csfrtoken?: string);
    setUserId(id: number | null): void;
    getUserId(): number | null;
    setUserToken(token: string | null): void;
    getUserToken(): string | null;
    /**
     * Converting date to string for GET requests.
     *
     * @param date
     * @returns {string}
     */
    protected getDateString(date: DateTime): string;
    /**
     * Get api url for user namespace.
     */
    protected getUserApiUrl(namespace: string, userId?: number | null): Promise<string>;
    /**
     * Get api url for workout namespace.
     */
    protected getWorkoutsApiUrl(namespace: string, workoutId: number | null, userId?: number | null): Promise<string>;
    /**
     * Log user to Endomondo and set user id and user token.
     *
     * @param email
     * @param password
     * @returns {Promise<string>} return user token
     */
    login(email: string, password: string): Promise<string>;
    getProfile(userId?: number | null): Promise<TYPES.API.Profile>;
    getWorkout(workoutId: number, userId?: number | null): Promise<Workout<number, TYPES.API.Workout>>;
    getWorkoutGpx(workoutId: number, userId?: number | null): Promise<string>;
    getWorkoutTcx(workoutId: number, userId?: number | null): Promise<string>;
    editWorkout(workout: Workout<number>, userId?: number | null): Promise<ApiResponseType<any>>;
    deleteWorkout(workoutId: number, userId?: number | null): Promise<ApiResponseType<any>>;
    addHashtag(hashtag: string, workoutId: number, userId?: number | null): Promise<ApiResponseType<any>>;
    removeHashtag(hashtag: string, workoutId: number, userId?: number | null): Promise<ApiResponseType<any>>;
    getWorkouts(filter?: TYPES.WorkoutFilters, userId?: number | null): Promise<TYPES.RESPONSES.ListOfWorkouts>;
    processWorkouts(filter: import("../types/WorkoutFilters").WorkoutFilters | undefined, processor: (workout: Workout<number, TYPES.API.Workout>) => Promise<Workout>, userId?: number | null): Promise<Workout[]>;
}
