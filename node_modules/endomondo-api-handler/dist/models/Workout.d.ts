import { DateTime, Duration } from 'luxon';
import { Unit } from 'mathjs';
import { Workout as BaseWorkout, TYPES } from 'fitness-models';
import Point from './Point';
import { Sport, Privacy, API } from '../types';
interface Constructor<Id, ApiSource> extends TYPES.WorkoutConstructor {
    typeId: Sport;
    points?: Point[];
    workoutPrivacy?: Privacy;
    hashtags?: string[];
    id: Id;
    source: ApiSource;
    message?: string;
}
export default class Workout<Id extends (number | undefined) = any, ApiSource extends (API.Workout | undefined) = any> extends BaseWorkout {
    protected id: Id;
    protected typeId: Sport;
    protected points: Point[];
    protected hashtags: string[];
    protected source: ApiSource;
    protected message?: string;
    constructor(options: Constructor<Id, ApiSource>);
    static SPORT_NAMES: {
        [key: string]: string;
    };
    static SPORT: {
        [key: string]: Sport;
    };
    static fromApi(workout: API.Workout): Workout<number, API.Workout>;
    static get(typeId: Sport, start: DateTime, duration: Duration, distance?: Unit, points?: Point[], options?: Partial<Constructor<undefined, undefined>>): Workout<undefined, undefined>;
    protected clone(extension: Partial<Constructor<number | undefined, ApiSource>>): any;
    getId(): Id;
    setId(id: number): Workout<number, ApiSource>;
    setId(id: undefined): Workout<undefined, ApiSource>;
    getTypeId(): import("fitness-models/dist/workout-types").WorkoutType;
    getSportName(): string;
    getPoints(): Point[];
    getWorkoutPrivacy(): Privacy | undefined;
    setWorkoutPrivacy(workoutPrivacy?: Privacy): Workout<Id, ApiSource>;
    getMessage(): string | undefined;
    setMessage(message?: string): Workout<Id, ApiSource>;
    setHashtags(hashtags: string[]): Workout<Id, ApiSource>;
    addHashtags(hashtags: string[]): Workout<Id, ApiSource>;
    addHashtag(hashtag: string): Workout<Id, ApiSource>;
    removeHashtag(hashtag: string): any;
    removeHashtags(hashtags: string[]): any;
    getSource(): ApiSource;
    toGpx(): string;
    hasGPSData(): boolean;
    setTypeId(typeId: Sport): Workout<Id, ApiSource>;
    setStart(start: DateTime): Workout<Id, ApiSource>;
    setDuration(duration: Duration): Workout<Id, ApiSource>;
    setDistance(distance?: Unit): Workout<Id, ApiSource>;
    setPoints(points: Point[]): Workout<Id, ApiSource>;
    setCalories(calories?: number): Workout<Id, ApiSource>;
    setNotes(notes?: string): Workout<Id, ApiSource>;
    setAvgHeartRate(avgHeartRate?: number): Workout<Id, ApiSource>;
    setMaxHeartRate(maxHeartRate?: number): Workout<Id, ApiSource>;
    setTitle(title?: string): Workout<Id, ApiSource>;
    setAscent(ascent?: Unit): Workout<Id, ApiSource>;
    setDescent(descent?: Unit): Workout<Id, ApiSource>;
    toObject(): Constructor<Id, ApiSource>;
}
export {};
