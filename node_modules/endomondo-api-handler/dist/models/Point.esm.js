import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { DateTime, Duration } from 'luxon';
import { unit } from 'mathjs';
import { Point as Point$1 } from 'fitness-models';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class Point extends Point$1 {
  constructor(options) {
    super(options);

    _defineProperty(this, "instruction", void 0);

    this.instruction = options.instruction;
  }

  static fromApi(point, timezone) {
    const {
      distance,
      altitude,
      sensor_data,
      time
    } = point;
    return new Point(_objectSpread({
      time: time ? DateTime.fromISO(time, {
        zone: timezone
      }) : undefined,
      instruction: point.instruction,
      latitude: point.latitude,
      longitude: point.longitude,
      duration: Duration.fromObject({
        seconds: point.duration
      }),
      distance: distance != null ? unit(distance, 'km') : undefined,
      altitude: altitude != null ? unit(altitude, 'm') : undefined
    }, sensor_data ? {
      speed: sensor_data.speed != null ? unit(sensor_data.speed, 'km/h') : undefined,
      hr: sensor_data.heart_rate,
      cadence: sensor_data.cadence
    } : {}));
  } // eslint-disable-next-line complexity


  static get(time, latitude, longitude, {
    instruction,
    distance,
    duration,
    speed,
    altitude,
    cadence,
    hr
  } = {}) {
    return new Point(_objectSpread({
      time: time instanceof DateTime ? time : DateTime.fromISO(time, {
        setZone: true
      }),
      latitude,
      longitude,
      hr,
      instruction,
      cadence,
      distance: typeof distance === 'number' ? unit(distance, 'km') : distance,
      altitude: typeof altitude === 'number' ? unit(altitude, 'm') : altitude,
      speed: typeof speed === 'number' ? unit(speed, 'km/h') : speed
    }, duration instanceof Duration ? {
      duration
    } : {}, {}, typeof duration === 'number' ? {
      duration: Duration.fromObject({
        seconds: duration
      })
    } : {}, {}, !(duration instanceof Duration) && typeof duration === 'object' ? {
      duration: Duration.fromObject(duration)
    } : {}));
  }

  clone(extension = {}) {
    return new Point(_objectSpread({}, this.toObject(), {}, extension));
  }

  getInstruction() {
    return this.instruction;
  }

  setInstruction(instruction) {
    return this.clone({
      instruction
    });
  }

  setTime(time) {
    return this.clone({
      time
    });
  }

  setLatitude(latitude) {
    return this.clone({
      latitude
    });
  }

  setLongitude(longitude) {
    return this.clone({
      longitude
    });
  }

  setAltitude(altitude) {
    return this.clone({
      altitude
    });
  }

  setDistance(distance) {
    return this.clone({
      distance
    });
  }

  setSpeed(speed) {
    return this.clone({
      speed
    });
  }

  setHeartRate(hr) {
    return this.clone({
      hr
    });
  }

  setCadence(cadence) {
    return this.clone({
      cadence
    });
  }

  setDuration(duration) {
    return this.clone({
      duration
    });
  }

  toObject() {
    return _objectSpread({}, super.toObject(), {
      instruction: this.getInstruction()
    });
  }

  toString() {
    const distance = this.getDistance();
    const altitude = this.getAltitude();
    const speed = this.getSpeed();
    const time = this.getTime();
    return [time != null ? time.toUTC().toFormat('yyyy-MM-dd HH:mm:ss \'UTC\'') : undefined, this.getInstruction(), this.getLatitude(), this.getLongitude(), distance != null ? distance.toNumber('km') : undefined, speed != null ? speed.toNumber('km/h') : undefined, altitude != null ? altitude.toNumber('m') : undefined, this.getHeartRate(), this.getCadence(), ''].map(item => {
      return item == null ? '' : item;
    }).join(';');
  }

}

export default Point;
