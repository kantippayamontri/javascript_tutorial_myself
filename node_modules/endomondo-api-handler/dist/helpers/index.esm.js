import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { GarminBuilder, buildGPX } from 'gpx-builder';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const {
  Point,
  Metadata,
  Person,
  Link,
  Track,
  Segment
} = GarminBuilder.MODELS; // @ts-ignore

function convertPoints(points) {
  return points.map(point => {
    return point.toObject();
  }).map(point => {
    const {
      altitude,
      cadence,
      hr,
      latitude,
      longitude,
      speed,
      time
    } = point;

    if (!latitude || !longitude) {
      return null;
    }

    return new Point(latitude, longitude, {
      time: time ? time.toJSDate() : undefined,
      hr,
      cad: cadence,
      ele: altitude ? altitude.toNumber('m') : undefined,
      speed: speed ? speed.toNumber('m/s') : undefined
    });
  }).filter(item => item !== null);
}

var workoutGPXExporter = (workout => {
  const workoutId = workout.getId();
  const source = workout.getSource();
  const authorId = source && source.author ? source.author.id : null;
  const authorName = source && source.author ? source.author.name : null;
  const builder = new GarminBuilder();
  builder.setMetadata(new Metadata(_objectSpread({}, authorName ? {
    author: new Person({
      name: authorName
    })
  } : {}, {
    link: new Link('http://www.endomondo.com', {
      text: 'Endomondo'
    }),
    time: workout.getStart().toJSDate()
  })));
  builder.setTracks([new Track([new Segment(convertPoints(workout.getPoints()))], _objectSpread({
    src: 'http://www.endomondo.com/'
  }, workoutId && authorId ? {
    link: new Link("https://www.endomondo.com/users/" + authorId + "/workouts/" + workoutId, {
      text: 'endomondo'
    })
  } : {}, {
    type: workout.getSportName()
  }))]);
  return buildGPX(builder.toObject());
});

export { workoutGPXExporter };
