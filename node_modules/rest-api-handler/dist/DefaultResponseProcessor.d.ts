import { ApiExceptionConstructor } from './DefaultApiException';
export declare type BodyDecoder<Decoded> = (response: Response) => Promise<Decoded>;
export interface ApiResponseType<Respond = any> {
    data: Respond;
    status: number;
    source: Response;
    request: Request;
}
/**
 * Processor provider that process response from API and throw custom Exception.
 */
export default class DefaultResponseProcessor<ResponseType = any> {
    private Exception;
    private decoder;
    /**
     * Constructor.
     *
     * @param Exception - Exception class that will be throwed if request fails.
     * @param decoder - Define custom response body decoder.
     */
    constructor(Exception: ApiExceptionConstructor<ResponseType>, decoder?: BodyDecoder<ResponseType>);
    processResponse(response: Response, request: Request): Promise<ApiResponseType<ResponseType>>;
    private static decodeResponse;
}
