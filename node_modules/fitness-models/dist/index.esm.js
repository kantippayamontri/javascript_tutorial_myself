import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { GarminBuilder, buildGPX } from 'gpx-builder';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class Point {
  constructor({
    time,
    latitude,
    longitude,
    distance,
    duration,
    speed,
    hr,
    cadence,
    altitude,
    temperature
  }) {
    _defineProperty(this, "time", void 0);

    _defineProperty(this, "latitude", void 0);

    _defineProperty(this, "longitude", void 0);

    _defineProperty(this, "distance", void 0);

    _defineProperty(this, "duration", void 0);

    _defineProperty(this, "speed", void 0);

    _defineProperty(this, "hr", void 0);

    _defineProperty(this, "cadence", void 0);

    _defineProperty(this, "altitude", void 0);

    _defineProperty(this, "temperature", void 0);

    this.time = time;
    this.latitude = latitude;
    this.longitude = longitude;
    this.distance = distance;
    this.duration = duration;
    this.speed = speed;
    this.hr = hr;
    this.cadence = cadence;
    this.altitude = altitude;
    this.temperature = temperature;
  }

  clone(extend) {
    return new Point(_objectSpread({}, this.toObject(), {}, extend));
  }

  getTime() {
    return this.time;
  }

  getLatitude() {
    return this.latitude;
  }

  getLongitude() {
    return this.longitude;
  }

  getAltitude() {
    return this.altitude;
  }

  getDistance() {
    return this.distance;
  }

  getSpeed() {
    return this.speed;
  }

  getHeartRate() {
    return this.hr;
  }

  getCadence() {
    return this.cadence;
  }

  getDuration() {
    return this.duration;
  }

  getTemperature() {
    return this.temperature;
  }

  setTime(time) {
    return this.clone({
      time
    });
  }

  setLatitude(latitude) {
    return this.clone({
      latitude
    });
  }

  setLongitude(longitude) {
    return this.clone({
      longitude
    });
  }

  setAltitude(altitude) {
    return this.clone({
      altitude
    });
  }

  setDistance(distance) {
    return this.clone({
      distance
    });
  }

  setSpeed(speed) {
    return this.clone({
      speed
    });
  }

  setHeartRate(hr) {
    return this.clone({
      hr
    });
  }

  setCadence(cadence) {
    return this.clone({
      cadence
    });
  }

  setDuration(duration) {
    return this.clone({
      duration
    });
  }

  setTemperature(temperature) {
    return this.clone({
      temperature
    });
  }

  toObject() {
    return {
      time: this.time,
      latitude: this.latitude,
      longitude: this.longitude,
      distance: this.distance,
      duration: this.duration,
      speed: this.speed,
      hr: this.hr,
      cadence: this.cadence,
      altitude: this.altitude,
      temperature: this.temperature
    };
  }

}

const RUNNING = 0;
const CYCLING_TRANSPORT = 1;
const CYCLING_SPORT = 2;
const MOUNTAIN_BIKINGS = 3;
const SKATING = 4;
const ROLLER_SKIING = 5;
const SKIING_CROSS_COUNTRY = 6;
const SKIING_DOWNHILL = 7;
const SNOWBOARDING = 8;
const KAYAKING = 9;
const KITE_SURFING = 10;
const ROWING = 11;
const SAILING = 12;
const WINDSURFING = 13;
const FINTESS_WALKING = 14;
const GOLFING = 15;
const HIKING = 16;
const ORIENTEERING = 17;
const WALKING = 18;
const RIDING = 19;
const SWIMMING = 20;
const CYCLING_INDOOR = 21;
const OTHER = 22;
const AEROBICS = 23;
const BADMINTON = 24;
const BASEBALL = 25;
const BASKETBALL = 26;
const BOXING = 27;
const CLIMBING_STAIRS = 28;
const CRICKET = 29;
const ELLIPTICAL_TRAINING = 30;
const DANCING = 31;
const FENCING = 32;
const FOOTBALL_AMERICAN = 33;
const FOOTBALL_RUGBY = 34;
const FOOTBALL_SOCCER = 35;
const HANDBALL = 36;
const HOCKEY = 37;
const PILATES = 38;
const POLO = 39;
const SCUBA_DIVING = 40;
const SQUASH = 41;
const TABLE_TENIS = 42;
const TENNIS = 43;
const VOLEYBALL_BEACH = 44;
const VOLEYBALL_INDOOR = 45;
const WEIGHT_TRAINING = 46;
const YOGA = 47;
const MARTINAL_ARTS = 48;
const GYMNASTICS = 49;
const STEP_COUNTER = 50;
const CIRKUIT_TRAINING = 87;
const RUNNING_TREADMILL = 88;
const SKATEBOARDING = 89;
const SURFING = 90;
const SNOWSHOEING = 91;
const WHEELCHAIR = 92;
const CLIMBING = 93;
const WALKING_TREADMILL = 94;
const KICK_SCOOTER = 95;
const STAND_UP_PADDLING = 96;
const TRAIL_RUNNING = 97;
const ROWING_INDOORS = 98;
const FLOORBALL = 99;
const ICE_SKATING = 100;
const SKI_TOURING = 101;
const ROPE_JUMPING = 102;
const STRETCHING = 103;
const CANICROSS = 104;
const PADDLE_TENNIS = 105;
const PARAGLIDING = 106;

var workoutTypes = ({
    __proto__: null,
    RUNNING: RUNNING,
    CYCLING_TRANSPORT: CYCLING_TRANSPORT,
    CYCLING_SPORT: CYCLING_SPORT,
    MOUNTAIN_BIKINGS: MOUNTAIN_BIKINGS,
    SKATING: SKATING,
    ROLLER_SKIING: ROLLER_SKIING,
    SKIING_CROSS_COUNTRY: SKIING_CROSS_COUNTRY,
    SKIING_DOWNHILL: SKIING_DOWNHILL,
    SNOWBOARDING: SNOWBOARDING,
    KAYAKING: KAYAKING,
    KITE_SURFING: KITE_SURFING,
    ROWING: ROWING,
    SAILING: SAILING,
    WINDSURFING: WINDSURFING,
    FINTESS_WALKING: FINTESS_WALKING,
    GOLFING: GOLFING,
    HIKING: HIKING,
    ORIENTEERING: ORIENTEERING,
    WALKING: WALKING,
    RIDING: RIDING,
    SWIMMING: SWIMMING,
    CYCLING_INDOOR: CYCLING_INDOOR,
    OTHER: OTHER,
    AEROBICS: AEROBICS,
    BADMINTON: BADMINTON,
    BASEBALL: BASEBALL,
    BASKETBALL: BASKETBALL,
    BOXING: BOXING,
    CLIMBING_STAIRS: CLIMBING_STAIRS,
    CRICKET: CRICKET,
    ELLIPTICAL_TRAINING: ELLIPTICAL_TRAINING,
    DANCING: DANCING,
    FENCING: FENCING,
    FOOTBALL_AMERICAN: FOOTBALL_AMERICAN,
    FOOTBALL_RUGBY: FOOTBALL_RUGBY,
    FOOTBALL_SOCCER: FOOTBALL_SOCCER,
    HANDBALL: HANDBALL,
    HOCKEY: HOCKEY,
    PILATES: PILATES,
    POLO: POLO,
    SCUBA_DIVING: SCUBA_DIVING,
    SQUASH: SQUASH,
    TABLE_TENIS: TABLE_TENIS,
    TENNIS: TENNIS,
    VOLEYBALL_BEACH: VOLEYBALL_BEACH,
    VOLEYBALL_INDOOR: VOLEYBALL_INDOOR,
    WEIGHT_TRAINING: WEIGHT_TRAINING,
    YOGA: YOGA,
    MARTINAL_ARTS: MARTINAL_ARTS,
    GYMNASTICS: GYMNASTICS,
    STEP_COUNTER: STEP_COUNTER,
    CIRKUIT_TRAINING: CIRKUIT_TRAINING,
    RUNNING_TREADMILL: RUNNING_TREADMILL,
    SKATEBOARDING: SKATEBOARDING,
    SURFING: SURFING,
    SNOWSHOEING: SNOWSHOEING,
    WHEELCHAIR: WHEELCHAIR,
    CLIMBING: CLIMBING,
    WALKING_TREADMILL: WALKING_TREADMILL,
    KICK_SCOOTER: KICK_SCOOTER,
    STAND_UP_PADDLING: STAND_UP_PADDLING,
    TRAIL_RUNNING: TRAIL_RUNNING,
    ROWING_INDOORS: ROWING_INDOORS,
    FLOORBALL: FLOORBALL,
    ICE_SKATING: ICE_SKATING,
    SKI_TOURING: SKI_TOURING,
    ROPE_JUMPING: ROPE_JUMPING,
    STRETCHING: STRETCHING,
    CANICROSS: CANICROSS,
    PADDLE_TENNIS: PADDLE_TENNIS,
    PARAGLIDING: PARAGLIDING
});

var SPORT_NAMES = {
  [RUNNING]: 'Running',
  [CYCLING_TRANSPORT]: 'Cycling, transport',
  [CYCLING_SPORT]: 'Cycling, sport',
  [MOUNTAIN_BIKINGS]: 'Mountain biking',
  [SKATING]: 'Skating',
  [ROLLER_SKIING]: 'Roller skiing',
  [SKIING_CROSS_COUNTRY]: 'Skiing, cross country',
  [SKIING_DOWNHILL]: 'Skiing, downhill',
  [SNOWBOARDING]: 'Snowboarding',
  [KAYAKING]: 'Kayaking',
  [KITE_SURFING]: 'Kite surfing',
  [ROWING]: 'Rowing',
  [SAILING]: 'Sailing',
  [WINDSURFING]: 'Windsurfing',
  [FINTESS_WALKING]: 'Fitness walking',
  [GOLFING]: 'Golfing',
  [HIKING]: 'Hiking',
  [ORIENTEERING]: 'Orienteering',
  [WALKING]: 'Walking',
  [RIDING]: 'Riding',
  [SWIMMING]: 'Swimming',
  [CYCLING_INDOOR]: 'Cycling, Indoor',
  [OTHER]: 'Other',
  [AEROBICS]: 'Aerobics',
  [BADMINTON]: 'Badminton',
  [BASEBALL]: 'Baseball',
  [BASKETBALL]: 'Basketball',
  [BOXING]: 'Boxing',
  [CLIMBING_STAIRS]: 'Climbing stairs',
  [CRICKET]: 'Cricket',
  [ELLIPTICAL_TRAINING]: 'Elliptical training',
  [DANCING]: 'Dancing',
  [FENCING]: 'Fencing',
  [FOOTBALL_AMERICAN]: 'Football, American',
  [FOOTBALL_RUGBY]: 'Football, rugby',
  [FOOTBALL_SOCCER]: 'Football, soccer',
  [HANDBALL]: 'Handball',
  [HOCKEY]: 'Hockey',
  [PILATES]: 'Pilates',
  [POLO]: 'Polo',
  [SCUBA_DIVING]: 'Scuba diving',
  [SQUASH]: 'Squash',
  [TABLE_TENIS]: 'Table tennis',
  [TENNIS]: 'Tennis',
  [VOLEYBALL_BEACH]: 'Volleyball, beach',
  [VOLEYBALL_INDOOR]: 'Volleyball, indoor',
  [WEIGHT_TRAINING]: 'Weight training',
  [YOGA]: 'Yoga',
  [MARTINAL_ARTS]: 'Martial arts',
  [GYMNASTICS]: 'Gymnastics',
  [STEP_COUNTER]: 'Step counter',
  [CIRKUIT_TRAINING]: 'Circuit Training',
  [SKATEBOARDING]: 'Skateboarding',
  [CLIMBING]: 'Climbing',
  [KICK_SCOOTER]: 'Kick scooter',
  [CANICROSS]: 'Canicross',
  [FLOORBALL]: 'Floorball',
  [ICE_SKATING]: 'Ice skating',
  [RUNNING_TREADMILL]: 'Running (Treadmill)',
  [SURFING]: 'Surfing',
  [SNOWSHOEING]: 'Showshoeing',
  [WHEELCHAIR]: 'Wheelchair',
  [WALKING_TREADMILL]: 'Walking (Treadmill)',
  [STAND_UP_PADDLING]: 'Stand up paddling',
  [TRAIL_RUNNING]: 'Trail running',
  [ROWING_INDOORS]: 'Rowing (indoors)',
  [SKI_TOURING]: 'Ski touring',
  [ROPE_JUMPING]: 'Rope jumping',
  [STRETCHING]: 'Stretching',
  [PADDLE_TENNIS]: 'Paddle tennis',
  [PARAGLIDING]: 'Paragliding'
};

const ME = 2;
const FRIENDS = 1;
const EVERYONE = 0;

var PRIVACY = ({
    __proto__: null,
    ME: ME,
    FRIENDS: FRIENDS,
    EVERYONE: EVERYONE
});

const {
  Point: Point$1,
  Metadata,
  Track,
  Segment
} = GarminBuilder.MODELS; // @ts-ignore

function convertPoints(points) {
  return points.map(point => {
    return point.toObject();
  }).map(point => {
    const {
      altitude,
      cadence,
      hr,
      latitude,
      longitude,
      speed,
      time,
      temperature
    } = point;

    if (!latitude || !longitude) {
      return null;
    }

    return new Point$1(latitude, longitude, {
      time: time ? time.toJSDate() : undefined,
      hr,
      cad: cadence,
      ele: altitude ? altitude.toNumber('m') : undefined,
      speed: speed ? speed.toNumber('m/s') : undefined,
      atemp: temperature ? temperature.toNumber('celsius') : undefined
    });
  }).filter(item => item !== null);
}

var workoutGPXExporter = (workout => {
  const builder = new GarminBuilder();
  builder.setMetadata(new Metadata({
    time: workout.getStart().toJSDate()
  }));
  builder.setTracks([new Track([new Segment(convertPoints(workout.getPoints()))], {
    type: workout.getTypeName()
  })]);
  return buildGPX(builder.toObject());
});

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class Workout {
  constructor({
    start,
    duration,
    typeId,
    distance,
    points,
    calories,
    notes,
    avgHeartRate,
    maxHeartRate,
    title,
    ascent,
    descent,
    isRace,
    isCommute,
    hashtags,
    privacy,
    mapPrivacy
  }) {
    _defineProperty(this, "start", void 0);

    _defineProperty(this, "duration", void 0);

    _defineProperty(this, "typeId", void 0);

    _defineProperty(this, "points", void 0);

    _defineProperty(this, "distance", void 0);

    _defineProperty(this, "calories", void 0);

    _defineProperty(this, "notes", void 0);

    _defineProperty(this, "avgHeartRate", void 0);

    _defineProperty(this, "maxHeartRate", void 0);

    _defineProperty(this, "title", void 0);

    _defineProperty(this, "ascent", void 0);

    _defineProperty(this, "descent", void 0);

    _defineProperty(this, "hashtags", void 0);

    _defineProperty(this, "isRace", void 0);

    _defineProperty(this, "isCommute", void 0);

    _defineProperty(this, "privacy", void 0);

    _defineProperty(this, "mapPrivacy", void 0);

    this.start = start;
    this.duration = duration;
    this.typeId = typeId;
    this.distance = distance;
    this.points = points || [];
    this.calories = calories;
    this.notes = notes;
    this.avgHeartRate = avgHeartRate;
    this.maxHeartRate = maxHeartRate;
    this.title = title;
    this.ascent = ascent;
    this.descent = descent;
    this.hashtags = hashtags || [];
    this.isRace = isRace || false;
    this.isCommute = isCommute || false;
    this.privacy = privacy;
    this.mapPrivacy = mapPrivacy;
  }

  clone(extend) {
    return new Workout(_objectSpread$1({}, this.toObject(), {}, extend));
  }

  getTypeId() {
    return this.typeId;
  }

  getTypeName() {
    // @ts-ignore
    return SPORT_NAMES[this.getTypeId()];
  }

  getStart() {
    return this.start;
  }

  getEnd() {
    const points = this.getPoints();

    if (points.length > 0) {
      const latPointTime = points[points.length - 1].getTime();

      if (latPointTime) {
        return latPointTime;
      }
    }

    return this.getStart().plus(this.getDuration());
  }

  getDuration() {
    return this.duration;
  }

  getDistance() {
    return this.distance;
  }

  getPoints() {
    return this.points;
  }

  hasPoints() {
    return this.points.length > 0;
  }

  hasGps() {
    return this.points.some(point => point.getLatitude() != null && point.getLongitude() != null);
  }

  getCalories() {
    return this.calories;
  }

  getNotes() {
    return this.notes;
  }

  getAvgHeartRate() {
    return this.avgHeartRate;
  }

  getMaxHeartRate() {
    return this.maxHeartRate;
  }

  getTitle() {
    return this.title;
  }

  getAscent() {
    return this.ascent;
  }

  getDescent() {
    return this.descent;
  }

  getPrivacy() {
    return this.privacy;
  }

  getMapPrivacy() {
    return this.mapPrivacy;
  }

  getHashtags() {
    return this.hashtags;
  }

  hasHashtag(hashtag) {
    return this.hashtags.includes(hashtag);
  }

  setHashtags(hashtags) {
    return this.clone({
      hashtags
    });
  }

  removeHashtag(hashtag) {
    return this.removeHashtags([hashtag]);
  }

  removeHashtags(hashtags) {
    return this.clone({
      hashtags: hashtags.filter(hashtag => hashtags.includes(hashtag))
    });
  }

  addHashtags(hashtags) {
    return this.clone({
      hashtags: [...this.getHashtags(), ...hashtags]
    });
  }

  addHashtag(hashtag) {
    return this.addHashtags([hashtag]);
  }

  setTypeId(typeId) {
    return this.clone({
      typeId
    });
  }

  setStart(start) {
    return this.clone({
      start
    });
  }

  setDuration(duration) {
    return this.clone({
      duration
    });
  }

  setDistance(distance) {
    return this.clone({
      distance
    });
  }

  setPoints(points) {
    return this.clone({
      points
    });
  }

  setCalories(calories) {
    return this.clone({
      calories
    });
  }

  setNotes(notes) {
    return this.clone({
      notes
    });
  }

  setAvgHeartRate(avgHeartRate) {
    return this.clone({
      avgHeartRate
    });
  }

  setMaxHeartRate(maxHeartRate) {
    return this.clone({
      maxHeartRate
    });
  }

  setTitle(title) {
    return this.clone({
      title
    });
  }

  setAscent(ascent) {
    return this.clone({
      ascent
    });
  }

  setDescent(descent) {
    return this.clone({
      descent
    });
  }

  setCommute(isCommute) {
    return this.clone({
      isCommute
    });
  }

  setRace(isRace) {
    return this.clone({
      isRace
    });
  }

  setPrivacy(privacy) {
    return this.clone({
      privacy
    });
  }

  setMapPrivacy(privacy) {
    return this.clone({
      mapPrivacy: privacy
    });
  }

  toObject() {
    return {
      start: this.start,
      duration: this.duration,
      typeId: this.typeId,
      distance: this.distance,
      points: this.points,
      calories: this.calories,
      notes: this.notes,
      avgHeartRate: this.avgHeartRate,
      maxHeartRate: this.maxHeartRate,
      title: this.title,
      ascent: this.ascent,
      descent: this.descent,
      isRace: this.isRace,
      isCommute: this.isCommute,
      hashtags: this.hashtags,
      privacy: this.privacy,
      mapPrivacy: this.mapPrivacy
    };
  }

  toGpx() {
    return workoutGPXExporter(this);
  }

  toString() {
    const distance = this.getDistance();
    return ['Workout', "type: " + this.getTypeName(), "start: " + this.getStart().toFormat('yyyy-MM-dd HH:mm'), distance ? "distance: " + Math.round(distance.toNumber('km') * 10) / 10 + "km" : null, "duration: " + Math.round(this.getDuration().as('minutes')) + "min"].join('; ');
  }

}

_defineProperty(Workout, "PRIVACY", PRIVACY);

export { Point, workoutTypes as WORKOUT_TYPES, Workout };
